"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boxesForMeasures = boxesForMeasures;

function boxesForMeasures(verovioSVG, extraClasses) {
  // given a Verovio-generated SVG, draw rectangles in front of each
  // bar and return a list of them (e.g. for adding callbacks)
  // N.B. I'm not removing previously-drawn barBoxes.
  var barBoxes = [];
  var SVGNS = "http://www.w3.org/2000/svg";
  var page = verovioSVG.getElementsByClassName('page-margin')[0];
  var systems = verovioSVG.getElementsByClassName('system');
  if (!extraClasses) extraClasses = "";

  for (var sysi = 0; sysi < systems.length; sysi++) {
    var sysMeasures = systems[sysi].getElementsByClassName('measure');
    var sysBBox = systems[sysi].getBBox();
    var maxHeight = sysBBox.height;
    var maxy = sysBBox.y;
    var vu = getStafflineGap(sysMeasures[0]) / 4;

    for (var measi = 0; measi < sysMeasures.length; measi++) {
      var box = document.createElementNS(SVGNS, "rect");
      var staff1 = sysMeasures[measi].getElementsByClassName('staff')[0];
      var staffLines = Array.prototype.filter.call(staff1.children, function (x) {
        return x.tagName === "path";
      });
      var bbox = staffLines[0].getBBox(); // console.log(bbox);

      box.setAttributeNS(null, "id", sysMeasures[measi].id + "-box");
      box.setAttributeNS(null, "class", "barBox " + extraClasses);
      box.setAttributeNS(null, "x", bbox.x + vu);
      box.setAttributeNS(null, "y", maxy);
      box.setAttributeNS(null, "height", maxHeight);
      box.setAttributeNS(null, "width", bbox.width - 2 * vu); // Rounded corners

      box.setAttributeNS(null, "rx", vu);
      box.setAttributeNS(null, "ry", vu);
      page.appendChild(box);
      barBoxes.push(box);
    }
  }

  return barBoxes;
}

function getStafflineGap(measure) {
  // some sort of scale info is needed. Let's use gap between
  // stafflines. This is not guaranteed to be stable, since the way
  // Verovio does these has no clear analogue in MEI. Also, they have
  // no class and aren't grouped separately, so are easiest detected
  // by their position in the file
  var staff = measure.getElementsByClassName('staff')[0];
  var kids = staff.children;

  if (kids[0].tagName === "path" && kids[1].tagName === "path") {
    var pos1 = kids[0].getAttributeNS(null, "d").split(" ")[1];
    var pos2 = kids[1].getAttributeNS(null, "d").split(" ")[1];
    return pos2 - pos1;
  } else {
    console.log("My assumptions about staves are wrong for measure:", measure);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJyYXJ5L2JveGVzRm9yTWVhc3VyZXMuanMiXSwibmFtZXMiOlsiYm94ZXNGb3JNZWFzdXJlcyIsInZlcm92aW9TVkciLCJleHRyYUNsYXNzZXMiLCJiYXJCb3hlcyIsIlNWR05TIiwicGFnZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzeXN0ZW1zIiwic3lzaSIsImxlbmd0aCIsInN5c01lYXN1cmVzIiwic3lzQkJveCIsImdldEJCb3giLCJtYXhIZWlnaHQiLCJoZWlnaHQiLCJtYXh5IiwieSIsInZ1IiwiZ2V0U3RhZmZsaW5lR2FwIiwibWVhc2kiLCJib3giLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInN0YWZmMSIsInN0YWZmTGluZXMiLCJBcnJheSIsInByb3RvdHlwZSIsImZpbHRlciIsImNhbGwiLCJjaGlsZHJlbiIsIngiLCJ0YWdOYW1lIiwiYmJveCIsInNldEF0dHJpYnV0ZU5TIiwiaWQiLCJ3aWR0aCIsImFwcGVuZENoaWxkIiwicHVzaCIsIm1lYXN1cmUiLCJzdGFmZiIsImtpZHMiLCJwb3MxIiwiZ2V0QXR0cmlidXRlTlMiLCJzcGxpdCIsInBvczIiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sU0FBU0EsZ0JBQVQsQ0FBMEJDLFVBQTFCLEVBQXNDQyxZQUF0QyxFQUFvRDtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxNQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBLE1BQUlDLEtBQUssR0FBRyw0QkFBWjtBQUNBLE1BQUlDLElBQUksR0FBR0osVUFBVSxDQUFDSyxzQkFBWCxDQUFrQyxhQUFsQyxFQUFpRCxDQUFqRCxDQUFYO0FBQ0EsTUFBSUMsT0FBTyxHQUFHTixVQUFVLENBQUNLLHNCQUFYLENBQWtDLFFBQWxDLENBQWQ7QUFDQSxNQUFJLENBQUNKLFlBQUwsRUFBbUJBLFlBQVksR0FBRyxFQUFmOztBQUNuQixPQUFLLElBQUlNLElBQUksR0FBRyxDQUFoQixFQUFtQkEsSUFBSSxHQUFHRCxPQUFPLENBQUNFLE1BQWxDLEVBQTBDRCxJQUFJLEVBQTlDLEVBQWtEO0FBQ2hELFFBQUlFLFdBQVcsR0FBR0gsT0FBTyxDQUFDQyxJQUFELENBQVAsQ0FBY0Ysc0JBQWQsQ0FBcUMsU0FBckMsQ0FBbEI7QUFDQSxRQUFJSyxPQUFPLEdBQUdKLE9BQU8sQ0FBQ0MsSUFBRCxDQUFQLENBQWNJLE9BQWQsRUFBZDtBQUNBLFFBQUlDLFNBQVMsR0FBR0YsT0FBTyxDQUFDRyxNQUF4QjtBQUNBLFFBQUlDLElBQUksR0FBR0osT0FBTyxDQUFDSyxDQUFuQjtBQUNBLFFBQUlDLEVBQUUsR0FBR0MsZUFBZSxDQUFDUixXQUFXLENBQUMsQ0FBRCxDQUFaLENBQWYsR0FBa0MsQ0FBM0M7O0FBQ0EsU0FBSyxJQUFJUyxLQUFLLEdBQUcsQ0FBakIsRUFBb0JBLEtBQUssR0FBR1QsV0FBVyxDQUFDRCxNQUF4QyxFQUFnRFUsS0FBSyxFQUFyRCxFQUF5RDtBQUN2RCxVQUFJQyxHQUFHLEdBQUdDLFFBQVEsQ0FBQ0MsZUFBVCxDQUF5QmxCLEtBQXpCLEVBQWdDLE1BQWhDLENBQVY7QUFDQSxVQUFJbUIsTUFBTSxHQUFHYixXQUFXLENBQUNTLEtBQUQsQ0FBWCxDQUFtQmIsc0JBQW5CLENBQTBDLE9BQTFDLEVBQW1ELENBQW5ELENBQWI7QUFDQSxVQUFJa0IsVUFBVSxHQUFHQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLE1BQWhCLENBQXVCQyxJQUF2QixDQUE0QkwsTUFBTSxDQUFDTSxRQUFuQyxFQUE2QyxVQUFDQyxDQUFEO0FBQUEsZUFBT0EsQ0FBQyxDQUFDQyxPQUFGLEtBQWMsTUFBckI7QUFBQSxPQUE3QyxDQUFqQjtBQUNBLFVBQUlDLElBQUksR0FBR1IsVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjWixPQUFkLEVBQVgsQ0FKdUQsQ0FLdkQ7O0FBQ0FRLE1BQUFBLEdBQUcsQ0FBQ2EsY0FBSixDQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQnZCLFdBQVcsQ0FBQ1MsS0FBRCxDQUFYLENBQW1CZSxFQUFuQixHQUF3QixNQUF2RDtBQUNBZCxNQUFBQSxHQUFHLENBQUNhLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUIsT0FBekIsRUFBa0MsWUFBWS9CLFlBQTlDO0FBQ0FrQixNQUFBQSxHQUFHLENBQUNhLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUIsR0FBekIsRUFBOEJELElBQUksQ0FBQ0YsQ0FBTCxHQUFTYixFQUF2QztBQUNBRyxNQUFBQSxHQUFHLENBQUNhLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUIsR0FBekIsRUFBOEJsQixJQUE5QjtBQUNBSyxNQUFBQSxHQUFHLENBQUNhLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUIsUUFBekIsRUFBbUNwQixTQUFuQztBQUNBTyxNQUFBQSxHQUFHLENBQUNhLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUIsT0FBekIsRUFBa0NELElBQUksQ0FBQ0csS0FBTCxHQUFjLElBQUlsQixFQUFwRCxFQVh1RCxDQVl2RDs7QUFDQUcsTUFBQUEsR0FBRyxDQUFDYSxjQUFKLENBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCaEIsRUFBL0I7QUFDQUcsTUFBQUEsR0FBRyxDQUFDYSxjQUFKLENBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCaEIsRUFBL0I7QUFDQVosTUFBQUEsSUFBSSxDQUFDK0IsV0FBTCxDQUFpQmhCLEdBQWpCO0FBQ0FqQixNQUFBQSxRQUFRLENBQUNrQyxJQUFULENBQWNqQixHQUFkO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPakIsUUFBUDtBQUNEOztBQUVELFNBQVNlLGVBQVQsQ0FBeUJvQixPQUF6QixFQUFrQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSUMsS0FBSyxHQUFHRCxPQUFPLENBQUNoQyxzQkFBUixDQUErQixPQUEvQixFQUF3QyxDQUF4QyxDQUFaO0FBQ0EsTUFBSWtDLElBQUksR0FBR0QsS0FBSyxDQUFDVixRQUFqQjs7QUFDQSxNQUFJVyxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFULE9BQVIsS0FBb0IsTUFBcEIsSUFBOEJTLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUVQsT0FBUixLQUFvQixNQUF0RCxFQUE4RDtBQUM1RCxRQUFJVSxJQUFJLEdBQUdELElBQUksQ0FBQyxDQUFELENBQUosQ0FBUUUsY0FBUixDQUF1QixJQUF2QixFQUE2QixHQUE3QixFQUFrQ0MsS0FBbEMsQ0FBd0MsR0FBeEMsRUFBNkMsQ0FBN0MsQ0FBWDtBQUNBLFFBQUlDLElBQUksR0FBR0osSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRRSxjQUFSLENBQXVCLElBQXZCLEVBQTZCLEdBQTdCLEVBQWtDQyxLQUFsQyxDQUF3QyxHQUF4QyxFQUE2QyxDQUE3QyxDQUFYO0FBQ0EsV0FBT0MsSUFBSSxHQUFHSCxJQUFkO0FBQ0QsR0FKRCxNQUlPO0FBQ0xJLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9EQUFaLEVBQWtFUixPQUFsRTtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYm94ZXNGb3JNZWFzdXJlcyh2ZXJvdmlvU1ZHLCBleHRyYUNsYXNzZXMpIHtcbiAgLy8gZ2l2ZW4gYSBWZXJvdmlvLWdlbmVyYXRlZCBTVkcsIGRyYXcgcmVjdGFuZ2xlcyBpbiBmcm9udCBvZiBlYWNoXG4gIC8vIGJhciBhbmQgcmV0dXJuIGEgbGlzdCBvZiB0aGVtIChlLmcuIGZvciBhZGRpbmcgY2FsbGJhY2tzKVxuICAvLyBOLkIuIEknbSBub3QgcmVtb3ZpbmcgcHJldmlvdXNseS1kcmF3biBiYXJCb3hlcy5cbiAgdmFyIGJhckJveGVzID0gW107XG4gIHZhciBTVkdOUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbiAgdmFyIHBhZ2UgPSB2ZXJvdmlvU1ZHLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BhZ2UtbWFyZ2luJylbMF07XG4gIHZhciBzeXN0ZW1zID0gdmVyb3Zpb1NWRy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzeXN0ZW0nKTtcbiAgaWYgKCFleHRyYUNsYXNzZXMpIGV4dHJhQ2xhc3NlcyA9IFwiXCI7XG4gIGZvciAodmFyIHN5c2kgPSAwOyBzeXNpIDwgc3lzdGVtcy5sZW5ndGg7IHN5c2krKykge1xuICAgIHZhciBzeXNNZWFzdXJlcyA9IHN5c3RlbXNbc3lzaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWVhc3VyZScpO1xuICAgIHZhciBzeXNCQm94ID0gc3lzdGVtc1tzeXNpXS5nZXRCQm94KCk7XG4gICAgdmFyIG1heEhlaWdodCA9IHN5c0JCb3guaGVpZ2h0O1xuICAgIHZhciBtYXh5ID0gc3lzQkJveC55O1xuICAgIHZhciB2dSA9IGdldFN0YWZmbGluZUdhcChzeXNNZWFzdXJlc1swXSkgLyA0O1xuICAgIGZvciAodmFyIG1lYXNpID0gMDsgbWVhc2kgPCBzeXNNZWFzdXJlcy5sZW5ndGg7IG1lYXNpKyspIHtcbiAgICAgIHZhciBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHTlMsIFwicmVjdFwiKTtcbiAgICAgIHZhciBzdGFmZjEgPSBzeXNNZWFzdXJlc1ttZWFzaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3RhZmYnKVswXTtcbiAgICAgIHZhciBzdGFmZkxpbmVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHN0YWZmMS5jaGlsZHJlbiwgKHgpID0+IHgudGFnTmFtZSA9PT0gXCJwYXRoXCIpO1xuICAgICAgdmFyIGJib3ggPSBzdGFmZkxpbmVzWzBdLmdldEJCb3goKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGJib3gpO1xuICAgICAgYm94LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgc3lzTWVhc3VyZXNbbWVhc2ldLmlkICsgXCItYm94XCIpO1xuICAgICAgYm94LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiY2xhc3NcIiwgXCJiYXJCb3ggXCIgKyBleHRyYUNsYXNzZXMpO1xuICAgICAgYm94LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBiYm94LnggKyB2dSk7XG4gICAgICBib3guc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIG1heHkpO1xuICAgICAgYm94LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIG1heEhlaWdodCk7XG4gICAgICBib3guc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBiYm94LndpZHRoIC0gKDIgKiB2dSkpO1xuICAgICAgLy8gUm91bmRlZCBjb3JuZXJzXG4gICAgICBib3guc2V0QXR0cmlidXRlTlMobnVsbCwgXCJyeFwiLCB2dSk7XG4gICAgICBib3guc2V0QXR0cmlidXRlTlMobnVsbCwgXCJyeVwiLCB2dSk7XG4gICAgICBwYWdlLmFwcGVuZENoaWxkKGJveCk7XG4gICAgICBiYXJCb3hlcy5wdXNoKGJveCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXJCb3hlcztcbn1cblxuZnVuY3Rpb24gZ2V0U3RhZmZsaW5lR2FwKG1lYXN1cmUpIHtcbiAgLy8gc29tZSBzb3J0IG9mIHNjYWxlIGluZm8gaXMgbmVlZGVkLiBMZXQncyB1c2UgZ2FwIGJldHdlZW5cbiAgLy8gc3RhZmZsaW5lcy4gVGhpcyBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBzdGFibGUsIHNpbmNlIHRoZSB3YXlcbiAgLy8gVmVyb3ZpbyBkb2VzIHRoZXNlIGhhcyBubyBjbGVhciBhbmFsb2d1ZSBpbiBNRUkuIEFsc28sIHRoZXkgaGF2ZVxuICAvLyBubyBjbGFzcyBhbmQgYXJlbid0IGdyb3VwZWQgc2VwYXJhdGVseSwgc28gYXJlIGVhc2llc3QgZGV0ZWN0ZWRcbiAgLy8gYnkgdGhlaXIgcG9zaXRpb24gaW4gdGhlIGZpbGVcbiAgdmFyIHN0YWZmID0gbWVhc3VyZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzdGFmZicpWzBdO1xuICB2YXIga2lkcyA9IHN0YWZmLmNoaWxkcmVuO1xuICBpZiAoa2lkc1swXS50YWdOYW1lID09PSBcInBhdGhcIiAmJiBraWRzWzFdLnRhZ05hbWUgPT09IFwicGF0aFwiKSB7XG4gICAgdmFyIHBvczEgPSBraWRzWzBdLmdldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiKS5zcGxpdChcIiBcIilbMV07XG4gICAgdmFyIHBvczIgPSBraWRzWzFdLmdldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiKS5zcGxpdChcIiBcIilbMV07XG4gICAgcmV0dXJuIHBvczIgLSBwb3MxO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKFwiTXkgYXNzdW1wdGlvbnMgYWJvdXQgc3RhdmVzIGFyZSB3cm9uZyBmb3IgbWVhc3VyZTpcIiwgbWVhc3VyZSk7XG4gIH1cbn1cblxuIl19